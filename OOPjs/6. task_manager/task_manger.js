class Task {
	constructor(taskName, description, priority, deadline, completed) {
		this.title = taskName;
		this.description = description;
		this.priority = priority; // 1 - –≤—ã—Å–æ–∫–∏–π, 2 - —Å—Ä–µ–¥–Ω–∏–π, 3 - –Ω–∏–∑–∫–∏–π
		this.deadline = new Date(deadline);
		this.completed = completed;
	}
}

class TaskManager {
	constructor() {
		this.tasks = [];
		this.initTable();
	}

	addTask(taskName, description, priority, deadline, completed = false) {
		const newTask = new Task(
			taskName,
			description,
			priority,
			deadline,
			completed
		);
		this.tasks.push(newTask);
		this.sortTasks();
		this.saveTasks();
		this.renderTasks();
	}

	sortTasks() {
		this.tasks.sort(
			(a, b) => a.priority - b.priority || a.deadline - b.deadline
		);
	}

	initTable() {
		const container = document.querySelector('body');
		const table = document.createElement('table');

		const thead = document.createElement('thead');
		const tr = document.createElement('tr');
		['–°—Ç–∞—Ç—É—Å', '–ó–∞–¥–∞—á–∞', '–î–µ–¥–ª–∞–π–Ω', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'].forEach(headerText => {
			const th = document.createElement('th');
			th.textContent = headerText;
			tr.appendChild(th);
		});
		thead.appendChild(tr);
		table.appendChild(thead);

		const tbody = document.createElement('tbody');
		table.appendChild(tbody);
		container.appendChild(table);
	}

	renderTasks() {
		const tbody = document.querySelector(`tbody`);
		tbody.innerHTML = '';

		this.tasks.forEach((task, index) => {
			const tr = document.createElement('tr');

			const statusTd = document.createElement('td');
			statusTd.classList.add('toggle-icon');
			statusTd.textContent = this.tasks[index].completed ? '‚úÖ' : 'üõë';
			statusTd.addEventListener('click', () =>
				this.toggleTaskStatus(index, statusTd)
			);
			tr.appendChild(statusTd);

			const titleTd = document.createElement('td');
			titleTd.textContent = task.title;
			tr.appendChild(titleTd);

			const deadlineTd = document.createElement('td');
			deadlineTd.textContent = task.deadline.toISOString().split('T')[0];
			tr.appendChild(deadlineTd);

			const priorityTd = document.createElement('td');
			priorityTd.textContent = task.priority;
			priorityTd.style.color = this.getPriorityColor(task.priority);
			tr.appendChild(priorityTd);

			tbody.appendChild(tr);
		});
	}
	toggleTaskStatus(index, statusTd) {
		this.tasks[index].completed = !this.tasks[index].completed;
		statusTd.textContent = this.tasks[index].completed ? '‚úÖ' : 'üõë';
		this.saveTasks();
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ localStorage
	saveTasks() {
		localStorage.setItem('tasks', JSON.stringify(this.tasks));
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ localStorage
	loadTasks() {
		const data = localStorage.getItem('tasks');
		if (data) {
			const parsedTasks = JSON.parse(data);
			this.tasks = parsedTasks.map(
				task =>
					new Task(
						task.title,
						task.description,
						task.priority,
						new Date(task.deadline),
						task.completed
					)
			);
			this.renderTasks();
		}
	}

	getPriorityColor(priority) {
		return priority === 1 ? 'red' : priority === 2 ? 'orange' : 'green';
	}
}

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
const taskManager = new TaskManager();

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ localStorage –ø—É—Å—Ç
if (!localStorage.getItem('tasks')) {
	taskManager.addTask('–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', '–ú–æ–ª–æ–∫–æ, —Ö–ª–µ–±, —è–π—Ü–∞', 2, '2025-03-10');
	taskManager.addTask('–°–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—á–µ—Ç', 1, '2025-03-08');
	taskManager.addTask(
		'–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É',
		'–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º',
		3,
		'2025-03-15'
	);
} else {
	taskManager.loadTasks();
}
